name: Frontend CI/CD

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: 16
  BUILD_DIR: packages/website/dist/apps/easyroute   # carpeta con index.html final

# ───────────────────────────────────────────────
# 1) BUILD
# ───────────────────────────────────────────────
jobs:
  build:
    runs-on: [self-hosted, linux, poolpo-frontend]
    environment: prod

    env:               # secretos y datos de commit accesibles en todos los steps
      TG_TOKEN:   ${{ secrets.TELEGRAM_TOKEN }}
      TG_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      ACTOR:      ${{ github.actor }}
      COMMIT_SHA: ${{ github.sha }}
      COMMIT_MSG: ${{ github.event.head_commit.message }}

    steps:
      # Aviso: build iniciado
      - name: Notify Telegram – build started
        if: github.ref == 'refs/heads/main'
        run: |
          MSG=$'🚀 *Build iniciado*\nAutor: _'"$ACTOR"$'_\nMensaje: '"$COMMIT_MSG"$'\nCommit: `'"$COMMIT_SHA"'`'
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
               -d chat_id="$TG_CHAT_ID" \
               --data-urlencode "text=$MSG" \
               -d parse_mode=Markdown

      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Activate Yarn 1.22.19
        run: |
          corepack enable
          corepack prepare yarn@1.22.19 --activate

      - uses: actions/cache@v4
        with:
          path: ~/.cache/yarn
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: yarn-${{ runner.os }}-

      - name: Install deps & build (website only)
        env:
          NODE_OPTIONS: --max_old_space_size=8192
        run: |
          yarn install --frozen-lockfile
          npx lerna run build --stream --scope @optimroute/website --concurrency 1

      - name: Upload website artifact
        uses: actions/upload-artifact@v4
        with:
          name: website-build
          path: ${{ env.BUILD_DIR }}/

      # Aviso: build fallido
      - name: Notify Telegram – build failed
        if: failure() && github.ref == 'refs/heads/main'
        run: |
          MSG=$'❌ *Build fallido*\nAutor: _'"$ACTOR"$'_\nCommit: `'"$COMMIT_SHA"'`'\nRevisa los logs en Actions.'
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
               -d chat_id="$TG_CHAT_ID" \
               --data-urlencode "text=$MSG" \
               -d parse_mode=Markdown

# ───────────────────────────────────────────────
# 2) DEPLOY
# ───────────────────────────────────────────────
  deploy:
    needs: build
    runs-on: [self-hosted, linux, poolpo-frontend]
    environment: prod

    env:
      TG_TOKEN:   ${{ secrets.TELEGRAM_TOKEN }}
      TG_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      ACTOR:      ${{ github.actor }}
      COMMIT_SHA: ${{ github.sha }}
      COMMIT_MSG: ${{ github.event.head_commit.message }}

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: website-build
          path: ./website-build

      - name: Sync to Nginx (atomic)
        run: |
          NEXT=/var/www/kacha-frontend_next
          sudo mkdir -p "$NEXT"
          sudo rsync -av --delete ./website-build/ "$NEXT"/
          sudo chown -R www-data:www-data "$NEXT"
          sudo ln -sfn "$NEXT" /var/www/kacha-frontend

      - name: Reload Nginx
        run: sudo systemctl reload nginx

      # Aviso: deploy exitoso
      - name: Notify Telegram – deploy success
        if: success() && github.ref == 'refs/heads/main'
        run: |
          MSG=$'✅ *Despliegue completado*\nAutor: _'"$ACTOR"$'_\nMensaje: '"$COMMIT_MSG"$'\nCommit: `'"$COMMIT_SHA"'`'
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
               -d chat_id="$TG_CHAT_ID" \
               --data-urlencode "text=$MSG" \
               -d parse_mode=Markdown

      # Aviso: deploy fallido
      - name: Notify Telegram – deploy failed
        if: failure() && github.ref == 'refs/heads/main'
        run: |
          MSG=$'❌ *Despliegue fallido*\nAutor: _'"$ACTOR"$'_\nCommit: `'"$COMMIT_SHA"'`'\nRevisa los logs en Actions.'
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
               -d chat_id="$TG_CHAT_ID" \
               --data-urlencode "text=$MSG" \
               -d parse_mode=Markdown
