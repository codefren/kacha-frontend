name: Frontend CI/CD

on:
  push:
    branches: [main]     # despliega cada push a main
  workflow_dispatch:

# Evita ejecuciones simultáneas en la misma rama
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# ───────────── Variables globales ─────────────
env:
  NODE_VERSION: 16
  BUILD_DIR: packages/website/dist/apps/easyroute   # carpeta con index.html final

# ───────────────────────────────────────────────
# 1) BUILD
# ───────────────────────────────────────────────
jobs:
  build:
    runs-on: [self-hosted, linux, poolpo-frontend]
    environment: prod          # secrets del entorno «prod»

    steps:

      - name: Debug Telegram secrets
        if: github.ref == 'refs/heads/main'
        env:
          TG_TOKEN:   ${{ secrets.TELEGRAM_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          # Longitud del token (GitHub oculta el valor real en los logs)
          echo "TOKEN length: ${#TG_TOKEN}"
          
          # Muestra el chat_id para confirmar que es el correcto
          echo "CHAT_ID: $TG_CHAT_ID"
          
          # Prueba rápida contra la API 'getMe' (debe devolver ok:true)
          curl -s "https://api.telegram.org/bot$TG_TOKEN/getMe" | jq .

      - run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
               -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
               -d text="🚀 *Build iniciado* – commit ${{ github.sha }}" \
               -d parse_mode=Markdown

      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Activate Yarn 1.22.19
        run: |
          corepack enable
          corepack prepare yarn@1.22.19 --activate

      - uses: actions/cache@v4
        with:
          path: ~/.cache/yarn
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: yarn-${{ runner.os }}-

      - name: Install deps & build (website only)
        env:
          NODE_OPTIONS: --max_old_space_size=8192     # 8 GB de heap
        run: |
          yarn install --frozen-lockfile
          npx lerna run build --stream \
              --scope @optimroute/website \
              --concurrency 1

      - name: Upload website artifact
        uses: actions/upload-artifact@v4
        with:
          name: website-build
          path: ${{ env.BUILD_DIR }}/

      # Aviso: build fallido
      - name: Notify Telegram – build failed
        if: failure() && github.ref == 'refs/heads/main'
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
               -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
               -d text="❌ *Build fallido* – commit \`${{ github.sha }}\`\nRevisa los logs en Actions." \
               -d parse_mode=Markdown

# ───────────────────────────────────────────────
# 2) DEPLOY
# ───────────────────────────────────────────────
  deploy:
    needs: build
    runs-on: [self-hosted, linux, poolpo-frontend]
    environment: prod

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: website-build
          path: ./website-build

      - name: Sync to Nginx (atomic)
        run: |
          NEXT=/var/www/kacha-frontend_next
          sudo mkdir -p "$NEXT"
          sudo rsync -av --delete ./website-build/ "$NEXT"/
          sudo chown -R www-data:www-data "$NEXT"
          sudo ln -sfn "$NEXT" /var/www/kacha-frontend

      - name: Reload Nginx
        run: sudo systemctl reload nginx

      # Aviso: deploy exitoso
      - name: Notify Telegram – deploy success
        if: success() && github.ref == 'refs/heads/main'
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
               -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
               -d text="✅ *Despliegue completado* – commit \`${{ github.sha }}\` en producción" \
               -d parse_mode=Markdown

      # Aviso: deploy fallido
      - name: Notify Telegram – deploy failed
        if: failure() && github.ref == 'refs/heads/main'
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
               -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
               -d text="❌ *Despliegue fallido* – commit \`${{ github.sha }}\`\nRevisa los logs en Actions." \
               -d parse_mode=Markdown
